#!/bin/bash

die(){
    echo $1
    exit 1
}

die_unknown(){
    echo "
 Unknown option \"$1\".

"
    ./configure --help
    exit 1
}

confirmno(){
    # call with a prompt string or use a default
    read -r -p "${1:-Are you sure? [y/N]} " response
    case $response in
        [yY][eE][sS]|[yY]) 
            true
            ;;
        *)
            false
            ;;
    esac
}

confirmyes(){
    # call with a prompt string or use a default
    read -r -p "${1:-Are you sure? [Y/n]} " response
    case $response in
        [yY][eE][sS]|[yY]) 
            true
            ;;
        [nN][oO]|[nN])
            false
            ;;
        *)
            true
            ;;
    esac
}

show_help(){
  echo " Usage: ./configure --opt1=<opt> --opt2=<opt>"
  echo "                        "
  echo " Options: [default], if any, in brackets after option."
  echo "                        "
  echo " --help                 Print this message"
  echo "                        "
  echo " --compiletype=<opt>    [release] Specify compile type: release or debug."
  echo "                        "
  echo " --dvb_dir=<path>       Use <path> for DVB headers. It is mandatory if you"
  echo "                        compiled v4l (based) drivers."
  echo "                        If you did not, don't use this option!"
  echo "                        Use like --dvb_dir=/usr/src/media_build/linux"
  echo "                        Info: www.lursen.org/wiki/V4l_and_ffdecsawrapper"
  echo "                        "
  echo " --optimize=<opt>       [yes] Perform FFDecsa optimization auto-detection"
  echo "                        for all mmx and sse types optimizations"
  echo "                        with both -O2 and -O3 levels"
  echo "                        long: Try all known optimizations"
  echo "                        no: Don't do any optimizations"
  echo "                        Option is disabled by --ffdecsa_mode option"
  echo "                        "
  echo " --tsbuffer=<opt>       [4] Change default TS buffer size (in MB)."
  echo "                        Use like --tsbuffer=8"
  echo "                        "
  echo " --ffdecsa_mode=<opt>   Test single <opt> optimization mode"
  echo "                        with both -O2 and -O3 level"
  echo "                        Use like  --ffdecsa_mode=PARALLEL_128_SSE"
  echo "                        Option disables --optimize option"
  echo "                        "
  echo " --ffdecsa_flags=<opt>  Use <opt> ffdecsa compiler flags."
  echo "                        Don't use this option unless you"
  echo "                        exactly know what you are doing."
  echo "                        "
  echo " --cxx=<opt>            [g++] Define C++ and CC version to use"
  echo "                        Use like --cxx=4.7"
  echo "                        "
  exit 0
}

ffdecsa_opt="yes"
compiletype_opt="release"

for opt do
  optval="${opt#*=}"
  case "$opt" in
  --dvb_dir=*) dvb_path=`eval echo $optval`
  ;;
  --cxx=*) CXX="g++-$optval"; GCC="gcc-$optval"
  ;;
  --ffdecsa_mode=*) ffdecsa_opt="defined"; MAX_MODE="$optval"
  ;;
  --ffdecsa_flags=*) ffdecsa_flags="$optval"
  ;;
  --tsbuffer=*) tsbuffer="$optval"
  ;;
  --optimize=*) ffdecsa_opt="$optval"
  ;;
  --compiletype=*) compiletype_opt="$optval"
  ;;
  --help) show_help
  ;;
  *)
  die_unknown $opt
  ;;
  esac
done

echo "# Automatically generated by configure - do not modify" > config.mak

# Get kernel version numbers

SHORT_KERNEL=$( echo `uname -r` | grep -o '[[:digit:]]\+\.[[:digit:]]\+' )
FIRST_DIGIT=$( echo `uname -r` | grep -o '[[:digit:]]\+' | head -n1 )
SECOND_DIGIT=$( echo `uname -r` | grep -o '[[:digit:]]\+' | head -n2 | awk 'NR==2' )
PATCHLEVEL=$( echo `uname -r` | grep -o '[[:digit:]]\+' | head -n3 | awk 'NR==3' )

# Abort if running kernel is < 3.x

if [ $FIRST_DIGIT -lt 3 ]; then
  echo "
The kernel you are running is not supported anymore.

Minimum supported version is 3.x

Aborting...
"
  exit 1
fi

# Check for use of v4l drivers

if test "x$dvb_path" != "x"; then
  echo "


    WARNING!!!

You have set the --dvb_dir= option, indicating that you compiled
and installed newest dvb drivers from v4l.This should mean that
you patched the v4l sources with the apropriate dvb-mutex patch.

If you are not sure, you probably did not.
In that case answer no to the question and first have a look at:

http://www.lursen.org/wiki/V4l_and_ffdecsawrapper
"

confirmyes "Proceed?[Y/n]"

  if [ $(echo $?) -eq 1 ]; then
    echo "
You have chosen not to proceed.

Aborting...
"
    exit 0
  fi
fi

#
# Begin Debian Section
#

# First get some info on what we are running

if [ -f /usr/bin/lsb_release ]; then
  OS=$( lsb_release -si )
  RELEASE=$( lsb_release -sc )
else
  OS=0
fi

# The rest of the Debian section
# depends on the outcome of next line

if [ $OS == Debian ] ; then

# Make sure that we are running as root

  if ! echo "$(whoami)" | grep "root" > /dev/null 2>&1; then
    echo "
You should run as root.

Aborting...
"
    make clean > /dev/null 2>&1
    exit 0
  fi

# Check if FFdecsawrapper is running
# If it is, offer to stop it

  if ps -C ffdecsawrapper > /dev/null 2>&1; then
    echo "
It seems that FFdecsawrapper is running.

It should be stopped before proceeding.
"
    confirmyes "Do you want to stop FFdecsawrapper now? [Y/n]"
    if [ $(echo $?) -eq 0 ]; then
      if test -e /etc/init.d/ffdecsawrapper; then
        /etc/init.d/ffdecsawrapper stop
        sleep 3
        rmmod dvbloopback > /dev/null 2>&1
      else
        killall -9 ffdecsawrapper
        sleep 3
        rmmod dvbloopback > /dev/null 2>&1
      fi
    fi
  fi

# Install build dependencies for FFdecsawrapper 

  if ! dpkg-query -l gettext > /dev/null 2>&1; then
    echo "
Missing dependency gettext, marking for installation.
"
    apt-get install gettext -y || die "Error installing dependency gettext"
  fi

  if ! dpkg-query -l libv4l-dev > /dev/null 2>&1; then
    echo "
Missing dependency libv4l-dev, marking for installation.
"
    apt-get install libv4l-dev -y || die "Error installing dependency libv4l-dev"
  fi

  if ! dpkg-query -l libproc-processtable-perl > /dev/null 2>&1; then
    echo "
Missing dependency libproc-processtable-perl, marking for installation.
"
    apt-get install libproc-processtable-perl -y || die "Error installing dependency libproc-processtable-perl"
  fi

  if ! dpkg-query -l libssl-dev > /dev/null 2>&1; then
    echo "
Missing dependency libssl-dev, marking for installation.
"
    apt-get install libssl-dev -y || die "Error installing dependency libssl-dev"
  fi

  if ! dpkg-query -l build-essential > /dev/null 2>&1; then
    echo "
Missing dependency build-essential, marking for installation.
"
    apt-get install build-essential -y || die "Error installing dependency build-essential"
  fi

# If we are running a Debian kernel
# we need the headers installed.
# But don't install headers if we are running
# a vanilla kernel
# uname -a does not return Debian
# when we are running a vannila kernel

  if uname -a | grep 'Debian' > /dev/null  2>&1; then
    if ! dpkg-query -l linux-headers-`uname -r` > /dev/null 2>&1; then
      echo "
Missing dependency linux-headers-`uname -r`, marking for installation.
"
      apt-get install linux-headers-`uname -r` -y  || die "Error installing dependency linux-headers-`uname -r`"
    fi
  fi

# Compare system default g++ (major) version with the
# g++ (major) version the kernel was built with
# If they differ, choose the version the kernel was built with
# and install any missing packages, unless we defined
# a specific version using --cxx= option on command line

  CCSYSTEM=$( g++ -v 2>&1 | grep -i "gcc version" | awk '{ print $3 }' | cut -d'.' -f1,2 )
  CCKERNEL=$( cat /proc/version | awk '{ print $7 }' | cut -d'.' -f1,2 )

  if ! [ $CCSYSTEM == $CCKERNEL ] ; then
    if test "x$CXX" = "x"; then
      CXX=g++-$CCKERNEL
      GCC=gcc-$CCKERNEL
    fi

    export GCC

    if ! dpkg-query -l g++-$CCKERNEL > /dev/null 2>&1; then
      echo "
Missing dependency g++-$CCKERNEL, marking for installation.
"
      apt-get install g++-$CCKERNEL -y || die "Error installing dependency g++-$CCKERNEL"
    fi
  fi
fi

#
# End Debian Section
#


# Get the right dvbdev.h in place
# If --dvb_dir= is set, use supplied header, else
# distinguish between '3.6 or lower' and '3.7 or higher' kernels,
# they use different versions of dvbdev.h

if test "x$dvb_path" != "x"; then
  if test -f $dvb_path/drivers/media/dvb-core/dvbdev.h; then
    cp -f $dvb_path/drivers/media/dvb-core/dvbdev.h dvbloopback/module/dvbdev.h
  elif test -f $dvb_path/drivers/media/dvb/dvb-core/dvbdev.h; then
    cp -f $dvb_path/drivers/media/dvb/dvb-core/dvbdev.h dvbloopback/module/dvbdev.h
  else echo "
ERROR!!!

Could not locate any of the following:

$dvb_path/drivers/media/dvb-core/dvbdev.h

$dvb_path/drivers/media/dvb/dvb-core/dvbdev.h

Aborting...
"
    make clean > /dev/null 2>&1
    exit 0
  fi
else
  if [ $SECOND_DIGIT -lt 7 ]; then
    cp -f dvbloopback/module/dvbdev-2.6.38.h dvbloopback/module/dvbdev.h
  else
    cp -f dvbloopback/module/dvbdev-3.7.x.h dvbloopback/module/dvbdev.h
  fi
fi

# Get the right Module.symvers in place
# Abort when it is not found

if test "x$dvb_path" = "x"; then
  if test -f /lib/modules/`uname -r`/build/Module.symvers; then
    cp -f /lib/modules/`uname -r`/build/Module.symvers dvbloopback/module/Module.symvers
  else echo "
ERROR!!!

could not locate /lib/modules/`uname -r`/build/Module.symvers

Aborting...
"
    make clean > /dev/null 2>&1
    exit 0
  fi
else
  if test -f $dvb_path/../v4l/Module.symvers; then
    cp -f $dvb_path/../v4l/Module.symvers dvbloopback/module/Module.symvers
  fi
fi

# Set compiler version,
# if not done allready

if test "x$CXX" = "x"; then
  CXX=g++
fi

# Define what optimization tests we want

if test "x$ffdecsa_flags" = "x"; then
  if test "x$ffdecsa_opt" = "xyes"; then
    CCC=$CXX
    export CCC
   ./FFdecsa_optimizer
  elif test "x$ffdecsa_opt" = "xlong"; then
    CCC=$CXX
    export CCC
   ./FFdecsa_optimizer -e
  elif test "x$ffdecsa_opt" = "xdefined"; then
    CCC=$CXX
    export CCC
   ./FFdecsa_optimizer -P $MAX_MODE
  elif test "x$ffdecsa_opt" != "xno"; then
    echo "
Bad option to --optimize '$ffdecsa_opt'.  Should be 'yes, long, no'"
    exit 1
  fi
fi

# Play with TsBufferSize, w.i.p

if test "x$tsbuffer" != "x"; then
  sed -i "s/DeCsaTsBuffSize=4/DeCsaTsBuffSize=$tsbuffer/" sc/PLUGINS/src/sc.c
fi

# If set, use user defined FFdecsa flags

if test "x$ffdecsa_flags" != "x"; then
  echo $ffdecsa_flags >> config.mak
fi

# Set compiletype

if test "x$compiletype_opt" = "xrelease"; then
  echo "RELEASE=1" >> config.mak
elif test "x$compiletype_opt" = "xdebug"; then
  echo ""
else
  echo "
Bad option to --compiletype '$compiletype_opt'. Should be 'release, debug'"
  exit 1
fi

echo "
`uname -r` kernel detected."

echo "
Using C++ compiler: $CXX"

if test "x$compiletype_opt" = "xrelease"; then
  echo "
Using compile type: release
"
elif test "x$compiletype_opt" = "xdebug"; then
  echo "
Using compile type: debug
"
fi


rm -rf "${TMPDIR}"
echo "CXX=$CXX" >> config.mak

# Compile and, if running Debian/Ubuntu,
# finish by installing the lot.

if [ $OS == Debian ] ; then
  echo "

Everything looks ok!

Just hit 'enter' to run
make && make module
"
  confirmyes "Start compiling now?[Y/n]"

  if [ $(echo $?) -eq 0 ]; then
    make && make module
    if [ $(echo $?) -eq 0 ]; then
      echo "
Do you want to install ffdecsawrapper binary and dvbloopback kernel module?

Binary's location: /usr/bin/ffdecsawrapper

dvbloopback module: /lib/modules/`uname -r`/updates/ffdecsawrapper/dvbloopback.ko

If you hit Y and your kernel needs to be patched, that will be done too.
"
      confirmyes "Yes, install them now![Y/n]"
      if [ $(echo $?) -eq 0 ]; then
        rm -f /lib/modules/`uname -r`/updates/ffdecsawrapper/dvbloopback.ko
        rm -f /usr/bin/ffdecsawrapper
        cp -f ffdecsawrapper /usr/bin
        mkdir -p /lib/modules/`uname -r`/updates/ffdecsawrapper
        /usr/bin/install dvbloopback.ko /lib/modules/`uname -r`/updates/ffdecsawrapper
        if [ $(echo $?) -eq 0 ]; then
          depmod -a
          echo "
#########################

Installed without errors!

#########################

"
          sleep 2

# The kernel needs to be patched if we don't
# use newest v4l drivers, but don't offer
# to do so if it allready has been done.

          if test "x$dvb_path" = "x"; then
            if ! find /lib/modules/`uname -r`/updates -name dvb-core.ko -print | grep "dvb-core.ko" > /dev/null 2>&1; then
              if uname -a | grep 'Debian' > /dev/null  2>&1; then
                ./kernelpatch
              fi
            fi
          fi 
        else
          echo "
#############################################################

Error(s) encoutered installing the dvbloopback kernel module.

#############################################################
"
        fi
      fi
    fi
  else
    echo "
NOT starting compilation
"
  fi
else
  echo "

Everything looks ok!

Just hit 'enter' to run
make && make module
"
confirmyes "Start compiling now?[Y/n]"

  if [ $(echo $?) -eq 0 ]; then
    make && make module
  else
    echo "
NOT starting compilation
"
  fi
fi
