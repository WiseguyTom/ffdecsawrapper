#!/bin/sh

die(){
    echo $1
    exit 1
}

die_unknown(){
    echo "Unknown option \"$1\"."
    echo "See $0 --help for available options."
    exit 1
}

confirmno(){
    # call with a prompt string or use a default
    read -r -p "${1:-Are you sure? [y/N]} " response
    case $response in
        [yY][eE][sS]|[yY]) 
            true
            ;;
        *)
            false
            ;;
    esac
}

confirmyes(){
    # call with a prompt string or use a default
    read -r -p "${1:-Are you sure? [Y/n]} " response
    case $response in
        [yY][eE][sS]|[yY]) 
            true
            ;;
        [nN][oO]|[nN])
            false
            ;;
        *)
            true
            ;;
    esac
}

#check whether option is supported by this cpu
check_cpu(){
    ok=0
    grep "^flags.* $1 " /proc/cpuinfo >/dev/null 2>&1
    if test $? -eq 0; then
      ok=1
    else
      grep "^flags.* $1\$" /proc/cpuinfo >/dev/null 2>&1
      if test $? -eq 0; then
        ok=1
      fi
    fi
    eval test $ok -eq 1
}

#try to figure out best FFdecsa compiler options
get_cpu_optimization(){
  FLAGS="FLAGS=-O3 -fexpensive-optimizations -funroll-loops"
  arch=`uname -m`
  processors_flags=`cat /proc/cpuinfo | grep "flags" | head -n 1`
  vendor=`cat /proc/cpuinfo |grep "vendor_id" | head -n 1 | sed -e "s/.*:\W*//"`
  gcc_ver=`$CXX -v 2>&1 | grep "gcc version" | head -n 1`
  gcc_major=`echo $gcc_ver | sed -e 's/^gcc version \([0-9]*\)\..*/\1/'`
  gcc_minor=`echo $gcc_ver | sed -e 's/^gcc version [0-9]*\.\([0-9]*\).*/\1/'`
  if test $gcc_major -gt 4; then
    ARCH="native"
  elif test $gcc_major -eq 4 && test $gcc_minor -ge 2; then
    ARCH="native"
  elif test "x$arch" = "xx86_64"; then
    if test "x$vendor" = "xAuthenticAMD"; then
      ARCH="k8"
    elif test "x$vendor" = "xGenuineIntel"; then
      ARCH="nocona"
    else
      echo **WARNING** - Unknown vendor $vendor - assuming nocona
      ARCH="nocona"
    fi
    FLAGS="$FLAGS -finline-limit=6000000 --param max-unrolled-insns=500"
  elif test "x$arch" = "xathlon-xp"; then
    ARCH="athlon-xp"
    FLAGS="$FLAGS -finline-limit=6000000 --param max-unrolled-insns=500"
  else
    ARCH="pentium"
  fi
  OPTS=""
  for opt in mmx sse sse2; do
    if check_cpu $opt; then
      OPTS="$OPTS $opt"
      FLAGS="$FLAGS -m$opt"
    fi
  done
  FLAGS="$FLAGS -march=$ARCH"
  echo "
Processor capabilities: $ARCH ($OPTS )"
}

show_help(){
  echo "Usage: configure [options]"
  echo "Options: [defaults, if any, in brackets after descriptions]"
  echo
  echo "Standard options:"
  echo "  --help                   print this message"
  echo "  --compiletype=<type>     [release] specify compile type of release or debug,"
  echo "  --dvb_dir=<path>         use <path> for DVB headers, obsolete for normal use."
  echo "                           you have to use it if you compiled new v4l drivers,"
  echo "                           like --dvb_dir=/usr/src/media_build/linux"
  echo "  --auxserver              use auxserver with localhost:7777:auxserver"
  echo "  --auxserver=<host:port:password>"
  echo "                           use auxserver with given parms"
  echo "  --optimize=<opts>        [yes] set FFDecsa optimiation detection"
  echo "                           yes: Try most common optimizations"
  echo "                           long: Try all known optimizations"
  echo "                           no: Don't do any optimizations"
  echo "  --tsbuffer=<val>         [4] Chanche default TS buffer size"
  echo "  --ffdecsa_mode=<val>     use <val> optimization"
  echo "                           like  --ffdecsa_mode=PARALLEL_128_SSE"
  echo "  --ffdecsa_flags=<val>    override ffdecsa compiler flags."
  echo "                           Don't use this option unless you"
  echo "                           exactly know what you are doing."
  echo "  --cxx=<val>              [g++] command for C++ compilation"
  exit 0
}

MAX_MODE=PARALLEL_32_INT
ffdecsa_opt="yes"
compiletype_opt="release"

for opt do
  optval="${opt#*=}"
  case "$opt" in
  --dvb_dir=*) dvb_path=`eval echo $optval`
  ;;
  --cxx=*) CXX="$optval"
  ;;
  --ffdecsa_mode=*) ffdecsa_opt="no"; MAX_MODE="$optval"
  ;;
  --ffdecsa_flags=*) ffdecsa_flags="$optval"
  ;;
  --tsbuffer=*) tsbuffer="$optval"
  ;;
  --optimize=*) ffdecsa_opt="$optval"
  ;;
  --auxserver) auxserver_opt="localhost:7777:auxserver"
  ;;
  --auxserver=*) auxserver_opt="$optval"
  ;;
  --compiletype=*) compiletype_opt="$optval"
  ;;
  --help) show_help
  ;;
  *)
  die_unknown $opt
  ;;
  esac
done

# Get kernel version numbers

SHORT_KERNEL=$( echo `uname -r` | grep -o '[[:digit:]]\+\.[[:digit:]]\+' )
FIRST_DIGIT=$( echo `uname -r` | grep -o '[[:digit:]]\+' | head -n1 )
SECOND_DIGIT=$( echo `uname -r` | grep -o '[[:digit:]]\+' | head -n2 | awk 'NR==2' )
PATCHLEVEL=$( echo `uname -r` | grep -o '[[:digit:]]\+' | head -n3 | awk 'NR==3' )

if [ -f /usr/bin/lsb_release ]; then
# Get OS and release info

    OS=$( lsb_release -si )
    RELEASE=$( lsb_release -sc )
fi

# Abort if running kernel is < 3.x

if [ $FIRST_DIGIT -lt 3 ]; then
  echo "
The kernel you are running is not supported anymore.

Minimum supported version is 3.x

Aborting...
"
  exit 1
fi

# Check for v4l drivers

if test "x$dvb_path" != "x"; then
  echo "


    WARNING!!!

You have set the --dvb_dir= option, indicating that you compiled
and installed newest dvb drivers from v4l.This should mean that
you patched the v4l sources with the apropriate dvb-mutex patch.

If you are not sure, you probably did not.
In that case answer no to the question and first have a look at:

http://www.lursen.org/wiki/V4l_and_ffdecsawrapper
"

confirmyes "Proceed?[Y/n]"

  if [ $(echo $?) -eq 1 ]; then
    echo "
You have chosen not to proceed.

Aborting...
"
    exit 0
  fi
fi

#
# Begin Debian Section
#

if test "x$dvb_path" = "x"; then
  if echo $OS | grep 'Debian' 2>&1 1>/dev/null; then
    if uname -a | grep 'Debian' > /dev/null  2>&1; then
      if ! find /lib/modules/`uname -r`/updates -name dvb-core.ko -print | grep "dvb-core.ko" > /dev/null 2>&1; then
        ./kernelpatch-debian
      fi
    fi
  fi
  if [ $(echo $?) -eq 1 ]; then
    echo "
Error(s) encountered during installing build-deps
for FFdecsawrapper and/or running kernel patch.
Fix the cause of the error(s) and run me again.
"
    confirmno "Do you want to continue anyway? [y/N]"
    if [ $(echo $?) -eq 1 ]; then
      git clean -xfd
      echo "
Aborting...
"
      exit 1
    fi
  fi
fi

#
# End Debian Section
#

#
# Begin Ubuntu Section
#

if test "x$dvb_path" = "x"; then
  if echo $OS | grep 'Ubuntu' 2>&1 1>/dev/null; then
    if uname -a | grep 'Ubuntu' > /dev/null  2>&1; then
      if ! find /lib/modules/`uname -r`/updates -name dvb-core.ko -print | grep "dvb-core.ko" > /dev/null 2>&1; then
        ./kernelpatch-ubuntu
      fi
    fi
  fi
  if [ $(echo $?) -eq 1 ]; then
    echo "
Error(s) encountered during installing build-deps
for FFdecsawrapper and/or running kernel patch.
Fix the cause of the error(s) and run me again.
"
    confirmno "Do you want to continue anyway? [y/N]"
    if [ $(echo $?) -eq 1 ]; then
      git clean -xfd
      echo "
Aborting...
"
      exit 1
    fi
  fi
fi

#
# End Ubuntu Section
#

# Get the right dvbdev.h in place
# If --dvb_dir= is set, use supplied header, else
# distinguish between '3.6 or lower' and '3.7 or higher' kernels,
# they use different versions of dvbdev.h

if test "x$dvb_path" != "x"; then
  if test -f $dvb_path/drivers/media/dvb-core/dvbdev.h; then
    cp -f $dvb_path/drivers/media/dvb-core/dvbdev.h dvbloopback/module/dvbdev.h
  elif test -f $dvb_path/drivers/media/dvb/dvb-core/dvbdev.h; then
    cp -f $dvb_path/drivers/media/dvb/dvb-core/dvbdev.h dvbloopback/module/dvbdev.h
  else echo "
ERROR!!!

Could not locate any of the following:

$dvb_path/drivers/media/dvb-core/dvbdev.h

$dvb_path/drivers/media/dvb/dvb-core/dvbdev.h

Aborting...
"
    exit 0
  fi
else
  if [ $SECOND_DIGIT -lt 7 ]; then
    cp -f dvbloopback/module/dvbdev-2.6.38.h dvbloopback/module/dvbdev.h
  else
    cp -f dvbloopback/module/dvbdev-3.7.x.h dvbloopback/module/dvbdev.h
  fi
fi

# Get the right Module.symvers in place
# Abort when it is not found

if test "x$dvb_path" = "x"; then
  if test -f /lib/modules/`uname -r`/build/Module.symvers; then
    cp -f /lib/modules/`uname -r`/build/Module.symvers dvbloopback/module/Module.symvers
  else echo "
ERROR!!!

could not locate /lib/modules/`uname -r`/build/Module.symvers

Aborting...
"
    exit 0
  fi
else
  if test -f $dvb_path/../v4l/Module.symvers; then
    cp -f $dvb_path/../v4l/Module.symvers dvbloopback/module/Module.symvers
  fi
fi

if test "x$CXX" = "x"; then
  CXX=g++
fi

echo "
`uname -r` kernel detected."

echo "
Using C++ compiler: $CXX"

if test "x$ffdecsa_opt" = "xlong"; then
  FFDECSA_MODES="PARALLEL_32_INT PARALLEL_32_4CHAR PARALLEL_32_4CHARA \
                 PARALLEL_64_8CHAR PARALLEL_64_8CHARA PARALLEL_64_2INT \
                 PARALLEL_64_LONG PARALLEL_64_MMX PARALLEL_128_16CHAR \
                 PARALLEL_128_16CHARA PARALLEL_128_4INT PARALLEL_128_2LONG \
                 PARALLEL_128_2MMX PARALLEL_128_SSE PARALLEL_128_SSE2"
elif test "x$ffdecsa_opt" = "xyes"; then
  FFDECSA_MODES="PARALLEL_32_INT PARALLEL_64_2INT PARALLEL_64_LONG \
                 PARALLEL_64_MMX PARALLEL_128_2LONG PARALLEL_128_2MMX \
                 PARALLEL_128_SSE PARALLEL_128_SSE2"
elif test "x$ffdecsa_opt" != "xno"; then
  echo "
Bad option to --optimize '$ffdecsa_opt'.  Should be 'yes, no, long'"
  exit 1
fi

if test "x${TMPDIR}" = "x"; then
  TMPDIR="/tmp"
fi

echo "# Automatically generated by configure - do not modify" > config.mak

if test "x$compiletype_opt" = "xrelease"; then
  echo "
Using compile type release"
  echo "RELEASE=1" >> config.mak
elif test "x$compiletype_opt" = "xdebug"; then
  echo "
Using compile type debug"
else
  echo "
Bad option to --compiletype '$compiletype_opt'. Should be 'release, debug'"
  exit 1
fi

if test "x$auxserver_opt" != "x"; then
  echo $auxserver_opt | {
    IFS=: read host port pass
    echo "AUXSERVER_OPTS=-DAUXSERVER_HOST=\\\"$host\\\" -DAUXSERVER_PORT=\\\"$port\\\" -DAUXSERVER_PASSWD=\\\"$pass\\\" -DUSE_AUXSERVER" >> config.mak
  }
fi

TMPDIR="${TMPDIR}/ffdecsawrapper.${RANDOM}"
mkdir ${TMPDIR}

#Test FFDECSA compile
MAX_val=0
if test "x$ffdecsa_opt" != "xno"; then
  if test "x$ffdecsa_flags" = "x"; then
    if test -f /proc/cpuinfo; then
      get_cpu_optimization
    fi
  else
    FLAGS=$ffdecsa_flags
  fi
  FFdecsaDIR="FFdecsa"
  TMPOUT="${TMPDIR}/FFdecsa/out"
  mkdir "${TMPDIR}/FFdecsa"
  cp $FFdecsaDIR/*.c $FFdecsaDIR/*.h $FFdecsaDIR/Makefile "${TMPDIR}/FFdecsa/"
  echo "
Trying various FFdecsa optimizations...
"
  for var in ${FFDECSA_MODES}; do
    make -C "${TMPDIR}/FFdecsa" FFdecsa_test "PARALLEL_MODE=${var}" "${FLAGS}" "COMPILER=$CXX" >/dev/null 2>&1
    if test $? -ne 0 ; then
      echo "
    ${var}: build failed"
    else
      rm -f ${TMPOUT}
      sync;sleep 2; "${TMPDIR}/FFdecsa/FFdecsa_test" > /dev/null 2>"${TMPOUT}"
      if test $? -ne 0; then
        echo "
    ${var}: test failed"
      else
        grep FAILED "${TMPOUT}" >/dev/null 2>&1
        if test $? -ne 1; then
          echo "
    ${var}: test failed"
        else
          res=`grep "speed=.*Mbit" "${TMPOUT}" | sed -e 's/^.*=\([0-9]*\)\.[0-9]* Mbit.*$/\1/'`
          echo "
    ${var}: $res"
          if test $res -gt $MAX_val; then
            MAX_val=$res
            MAX_MODE=$var
          fi
        fi
      fi
    fi
  make -C "${TMPDIR}/FFdecsa" clean >/dev/null 2>&1
  done
  echo "
Choosing PARALLEL_MODE = ${MAX_MODE}"
  echo "FFDECSA_OPTS = \"$FLAGS\" PARALLEL_MODE=${MAX_MODE} COMPILER=$CXX" >> config.mak
else
  if test "x$ffdecsa_flags" = "x"; then
    if test -f /proc/cpuinfo; then
      get_cpu_optimization
    fi
  else
    FLAGS=$ffdecsa_flags
  fi

  echo "
Using PARALLEL_MODE = ${MAX_MODE}"

  if test "x$MAX_MODE" != "xPARALLEL_32_INT"; then
    echo "FFDECSA_OPTS = \"$FLAGS\" PARALLEL_MODE=${MAX_MODE} COMPILER=$CXX" >> config.mak
  else
    echo "FFDECSA_OPTS = PARALLEL_MODE=${MAX_MODE} COMPILER=$CXX" >> config.mak
  fi
fi

if test "x$tsbuffer" != "x"; then
  sed -i "s/DeCsaTsBuffSize=4/DeCsaTsBuffSize=$tsbuffer/" sc/PLUGINS/src/sc.c
fi

rm -rf "${TMPDIR}"
echo "CXX=$CXX" >> config.mak
date >> config.log
echo "	$0 $*" >> config.log
echo "

Everything looks ok!

Just hit 'enter' to run
make && make module
"
confirmyes "Start compiling now?[Y/n]"

if [ $(echo $?) -eq 0 ]; then
  make && make module
else
  echo "
NOT starting compilation
"
fi
